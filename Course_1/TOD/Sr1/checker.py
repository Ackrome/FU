import codecs
import json
sr1 = {'cells': [{'cell_type': 'markdown', 'metadata': {'id': 'keNLaw3qDlr6'}, 'source': ['# Тема 1.1. Библиотека Numpy']}, {'cell_type': 'markdown', 'metadata': {'id': 'YsR-NpL7Dlr8'}, 'source': ['## Самостоятельная работа №1.1 (часть 1)']}, {'cell_type': 'markdown', 'metadata': {'id': 'lin0Q0rzDlr8'}, 'source': ['Замечание: при решении данных задач не подразумевается использования циклов или генераторов Python, если в задании не сказано обратного. Решение должно опираться на использования функционала библиотеки `numpy`.']}, {'cell_type': 'code', 'execution_count': 1, 'metadata': {'id': 'ORoeuXkMEf2D'}, 'outputs': [], 'source': ['import numpy as np\n', "mix = np.loadtxt(f'minutes_n_ingredients.csv', delimiter = ',', skiprows = 1, dtype = np.int32)"]}, {'cell_type': 'markdown', 'metadata': {'id': '8ropuHqADlr8'}, 'source': ['1. Файл `minutes_n_ingredients.csv` содержит информацию об идентификаторе рецепта, времени его выполнения в минутах и количестве необходимых ингредиентов. Считайте данные из этого файла в виде массива `numpy` типа `int32`, используя `np.loadtxt`. Выведите на экран первые 5 строк массива.']}, {'cell_type': 'code', 'execution_count': 2, 'metadata': {'colab': {'base_uri': 'https://localhost:8080/'}, 'id': 'GL3TenDHEdhm', 'outputId': '23c8ca52-0c9e-41e2-c1e4-e643955a3b1b'}, 'outputs': [{'name': 'stdout', 'output_type': 'stream', 'text': ['[[127244     60     16]\n', ' [ 23891     25      7]\n', ' [ 94746     10      6]\n', ' [ 67660      5      6]\n', ' [157911     60     14]]\n']}], 'source': ['print(mix[:5,:])']}, {'cell_type': 'markdown', 'metadata': {'id': 'Qgk-TMQNDlr8'}, 'source': ['2. Вычислите среднее значение, минимум, максимум и медиану по каждому из столбцов, кроме первого.']}, {'cell_type': 'code', 'execution_count': 3, 'metadata': {'colab': {'base_uri': 'https://localhost:8080/'}, 'id': 'VwF1EUd7Eeep', 'outputId': 'df21be19-4751-47b5-8262-5aa5f14480bd'}, 'outputs': [{'name': 'stdout', 'output_type': 'stream', 'text': ['[-21348      9] [0 1] [2147483647         39] [40.  9.]\n']}], 'source': ['print(  np.mean(mix[:, 1:], axis = 0, dtype=np.int_), np.min(mix[:, 1:], axis = 0),np.max(mix[:,1:], axis = 0), np.median(mix[:, 1:], axis = 0))']}, {'cell_type': 'markdown', 'metadata': {'id': 'jvOWcqnjDlr8'}, 'source': ['3. Ограничьте сверху значения продолжительности выполнения рецепта значением квантиля $q_{0.75}$.']}, {'cell_type': 'code', 'execution_count': 4, 'metadata': {'colab': {'base_uri': 'https://localhost:8080/'}, 'id': 'THamVQ0ZKvjW', 'outputId': '7e4e2eda-c9b0-45f5-fb0e-672881b473ef'}, 'outputs': [{'name': 'stdout', 'output_type': 'stream', 'text': ['[60 25 10 ... 65  5 65]\n']}], 'source': ['mix[:,1] = np.clip(mix[:,1],a_max = np.quantile(mix[:,1], 0.75),a_min=None)\n', 'print(mix[:,1])']}, {'cell_type': 'markdown', 'metadata': {'id': 'sE5IHPH5Dlr8'}, 'source': ['4. Посчитайте, для скольких рецептов указана продолжительность, равная нулю. Замените для таких строк значение в данном столбце на 1.']}, {'cell_type': 'code', 'execution_count': 5, 'metadata': {'colab': {'base_uri': 'https://localhost:8080/'}, 'id': 'MXm3TWM2P1at', 'outputId': 'a8ff5746-18a5-48aa-cc59-efb4435633cd'}, 'outputs': [{'data': {'text/plain': ['479']}, 'execution_count': 5, 'metadata': {}, 'output_type': 'execute_result'}], 'source': ['np.shape(np.where(mix[:,1] == 0))[1]']}, {'cell_type': 'markdown', 'metadata': {'id': '3bNlWxVGDlr8'}, 'source': ['5. Посчитайте, сколько уникальных рецептов находится в датасете.']}, {'cell_type': 'code', 'execution_count': 6, 'metadata': {'colab': {'base_uri': 'https://localhost:8080/'}, 'id': 'vP2wzbyaYv38', 'outputId': '455209c5-1bdd-4f5f-f2a2-3741fae0ff26'}, 'outputs': [{'name': 'stdout', 'output_type': 'stream', 'text': ['Unique = 100000\n']}], 'source': ["print(f'Unique = {np.shape(np.unique(mix[:,:1], axis = 0))[0]}')"]}, {'cell_type': 'markdown', 'metadata': {'id': '0HLauVN7Dlr9'}, 'source': ['6. Сколько и каких различных значений кол-ва ингредиентов присутвует в рецептах из датасета?']}, {'cell_type': 'code', 'execution_count': 7, 'metadata': {'colab': {'base_uri': 'https://localhost:8080/'}, 'id': '866r6mugaI4s', 'outputId': '7fde741f-2217-4f1e-b967-8a819fee3f97'}, 'outputs': [{'name': 'stdout', 'output_type': 'stream', 'text': ['37\n']}], 'source': ['print(len(np.unique(mix[:, 2])))']}, {'cell_type': 'markdown', 'metadata': {'id': 'Ivrax5KXDlr9'}, 'source': ['## Самостоятельная работа №1.1 (часть 2)']}, {'cell_type': 'markdown', 'metadata': {'id': 'R4hMMfiADlr9'}, 'source': ['7. Создайте версию массива, содержащую информацию только о рецептах, состоящих не более чем из 5 ингредиентов.']}, {'cell_type': 'code', 'execution_count': 8, 'metadata': {'colab': {'base_uri': 'https://localhost:8080/'}, 'id': '-lmleoHcbLKI', 'outputId': '239d597c-76fd-434e-b10d-31b2ed229a0f'}, 'outputs': [{'name': 'stdout', 'output_type': 'stream', 'text': ['[[446597     15      5]\n', ' [204134      5      3]\n', ' [ 25623      6      4]\n', ' ...\n', ' [ 52088     60      5]\n', ' [128811     15      4]\n', ' [370915      5      4]]\n']}], 'source': ['print(mix[np.where(mix[:,2] <= 5)])']}, {'cell_type': 'markdown', 'metadata': {'id': 'RCXlZ-8qDlr9'}, 'source': ['8. Для каждого рецепта посчитайте, сколько в среднем ингредиентов приходится на одну минуту рецепта. Найдите максимальное значение этой величины для всего датасета']}, {'cell_type': 'code', 'execution_count': 9, 'metadata': {'colab': {'base_uri': 'https://localhost:8080/'}, 'id': 'cCQwFic2btvA', 'outputId': '5a6b13d7-2df1-4816-b822-2748df971977'}, 'outputs': [{'name': 'stderr', 'output_type': 'stream', 'text': ['C:\\Users\\ivant\\AppData\\Local\\Temp\\ipykernel_18028\\3741690716.py:1: RuntimeWarning: divide by zero encountered in divide\n', '  np.mean(mix[:,2]/mix[:,1])\n']}, {'data': {'text/plain': ['inf']}, 'execution_count': 9, 'metadata': {}, 'output_type': 'execute_result'}], 'source': ['np.mean(mix[:,2]/mix[:,1])']}, {'cell_type': 'markdown', 'metadata': {'id': 'QCm7SKhmDlr9'}, 'source': ['9. Вычислите среднее количество ингредиентов для топ-100 рецептов с наибольшей продолжительностью']}, {'cell_type': 'code', 'execution_count': 10, 'metadata': {'colab': {'base_uri': 'https://localhost:8080/'}, 'id': 'b_0wUqW1beeO', 'outputId': '6f923234-b2d8-410c-d732-0146ae37bbd7'}, 'outputs': [{'name': 'stdout', 'output_type': 'stream', 'text': ['9.94949494949495\n']}], 'source': ['print(np.mean(mix[np.argsort(mix[:,1])][:-100:-1, 2]))']}, {'cell_type': 'markdown', 'metadata': {'id': 'OM2ICyPlDlr9'}, 'source': ['10. Выберите случайным образом и выведите информацию о 10 различных рецептах']}, {'cell_type': 'code', 'execution_count': 11, 'metadata': {'colab': {'base_uri': 'https://localhost:8080/'}, 'id': 'KkKFrTSrf-S9', 'outputId': 'afb73694-eb82-43ce-fbfc-271fc23b5aa7'}, 'outputs': [{'name': 'stdout', 'output_type': 'stream', 'text': ['[[267422      5      6]\n', ' [ 52767     65     16]\n', ' [ 66416     40     11]\n', ' [149732     35      9]\n', ' [104240     25      4]\n', ' [457890     10      6]\n', ' [ 64919      5     12]\n', ' [397633     10      5]\n', ' [330459     55     13]\n', ' [188149     30      7]]\n']}], 'source': ['print(mix[np.random.randint(high=len(mix),low=0,size=10)])']}, {'cell_type': 'markdown', 'metadata': {'id': '0fNeHHpzDlr9'}, 'source': ['11. Выведите процент рецептов, кол-во ингредиентов в которых меньше среднего.']}, {'cell_type': 'code', 'execution_count': 12, 'metadata': {'colab': {'base_uri': 'https://localhost:8080/'}, 'id': '5ZoSUn5rgfKi', 'outputId': '6d89606a-689e-49fe-c91b-e6ce084b2987'}, 'outputs': [{'name': 'stdout', 'output_type': 'stream', 'text': ['0.001\n']}], 'source': ['print(len(np.where(mix[:,2] <= np.mean(mix[:, 2], axis = 0, dtype=np.int_)))/len(mix) * 100)']}, {'cell_type': 'markdown', 'metadata': {'id': 'pxW6D9z4Dlr9'}, 'source': ['12. Назовем "простым" такой рецепт, длительность выполнения которого не больше 20 минут и кол-во ингредиентов в котором не больше 5. Создайте версию датасета с дополнительным столбцом, значениями которого являются 1, если рецепт простой, и 0 в противном случае.']}, {'cell_type': 'code', 'execution_count': 13, 'metadata': {'colab': {'base_uri': 'https://localhost:8080/'}, 'id': 'ZFn5MpeLhcvj', 'outputId': 'db4fd80a-d335-46b5-8281-59a4b6700cdd'}, 'outputs': [{'data': {'text/plain': ['array([[127244,     60,     16,      0],\n', '       [ 23891,     25,      7,      0],\n', '       [ 94746,     10,      6,      0],\n', '       ...,\n', '       [498432,     65,     15,      0],\n', '       [370915,      5,      4,      1],\n', '       [ 81993,     65,     14,      0]])']}, 'execution_count': 13, 'metadata': {}, 'output_type': 'execute_result'}], 'source': ['a = ((mix[:,2] <=  5) & (mix[:,1]<=20)).reshape(len(mix),1)\n', 'o = np.hstack((mix,a))\n', 'o']}, {'cell_type': 'markdown', 'metadata': {'id': 'hsuRBNwKDlr9'}, 'source': ['13. Выведите процент "простых" рецептов в датасете']}, {'cell_type': 'code', 'execution_count': 14, 'metadata': {}, 'outputs': [{'name': 'stdout', 'output_type': 'stream', 'text': ['0.001\n']}, {'ename': '', 'evalue': '', 'output_type': 'error', 'traceback': ['\x1b[1;31mThe Kernel crashed while executing code in the current cell or a previous cell. \n', '\x1b[1;31mPlease review the code in the cell(s) to identify a possible cause of the failure. \n', "\x1b[1;31mClick <a href='https://aka.ms/vscodeJupyterKernelCrash'>here</a> for more info. \n", "\x1b[1;31mView Jupyter <a href='command:jupyter.viewOutput'>log</a> for further details."]}], 'source': ['print((len(np.where(o[:,3]==1))/len(o)) *100)']}, {'cell_type': 'markdown', 'metadata': {'id': 'e0TbVyt9Dlr9'}, 'source': ['14. Разделим рецепты на группы по следующему правилу. Назовем рецепты короткими, если их продолжительность составляет менее 10 минут; стандартными, если их продолжительность составляет более 10, но менее 20 минут; и длинными, если их продолжительность составляет не менее 20 минут. Создайте трехмерный массив, где нулевая ось отвечает за номер группы (короткий, стандартный или длинный рецепт), первая ось - за сам рецепт и вторая ось - за характеристики рецепта. Выберите максимальное количество рецептов из каждой группы таким образом, чтобы было возможно сформировать трехмерный массив. Выведите форму полученного массива.']}, {'cell_type': 'code', 'execution_count': None, 'metadata': {}, 'outputs': [], 'source': []}], 'metadata': {'colab': {'provenance': []}, 'kernelspec': {'display_name': 'Python 3 (ipykernel)', 'language': 'python', 'name': 'python3'}, 'language_info': {'codemirror_mode': {'name': 'ipython', 'version': 3}, 'file_extension': '.py', 'mimetype': 'text/x-python', 'name': 'python', 'nbconvert_exporter': 'python', 'pygments_lexer': 'ipython3', 'version': '3.11.8'}}, 'nbformat': 4, 'nbformat_minor': 0}
def form_dicts(some_dict:dict):
    some_list=[some_dict['cells'][x]['cell_type']+str(x) for x in range(len(some_dict['cells']))]
    dic = dict()
    for i in range(len(some_list)):
        if 'markdown' in some_list[i]:
            cur = [''.join(x['source']) for x in some_dict['cells']][i]
        elif 'code' in some_list[i]:
            try:
                dic[cur].append([x['source'] for x in some_dict['cells']][i])
            except:
                dic[cur]=[x['source'] for x in some_dict['cells']][i]
    return dic

f = codecs.open('02_pandas_в3_lr2_ПИ21-Х_Фамилия_Имя.ipynb','r','UTF-8')
sr2 = json.load(f)
print(form_dicts(sr2))
answers={
    'Библиотека Numpy': form_dicts(sr1),
    
}