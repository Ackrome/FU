def newton_method(f, df, x0, tol, max_iterations=100):
    """
    Реализация метода Ньютона для решения уравнения f(x) = 0.

    Параметры:
        f: функция, для которой ищется корень.
        df: производная функции f.
        x0: начальное приближение.
        tol: требуемая точность (остановка, когда |x_{n+1} - x_n| < tol).
        max_iterations: максимальное количество итераций для предотвращения зацикливания.

    Возвращает:
        Приближённое значение корня.
    """
    x_prev = x0  # Начальное приближение

    for iteration in range(max_iterations):
        # Вычисляем значение функции и её производной в текущей точке
        fx = f(x_prev)
        dfx = df(x_prev)

        # Проверяем, что производная не равна нулю (чтобы избежать деления на ноль)
        if dfx == 0:
            raise ValueError("Производная равна нулю. Метод Ньютона не может продолжаться.")

        # Вычисляем новое приближение
        x_curr = x_prev - fx / dfx

        # Проверяем условие остановки
        if abs(x_curr - x_prev) < tol:
            return x_curr

        # Обновляем текущее приближение
        x_prev = x_curr

    raise ValueError("Метод Ньютона не сошёлся за заданное количество итераций.")

f = lambda x: x**3 - 3*x**2 + 2
df = lambda x: 3*x**2 - 6*x

# Начальное приближение и точность
x0 = 0.5  # Начальное приближение
epsilon = 0.0001

# Находим корень методом Ньютона
root = newton_method(f, df, x0, epsilon)

print(f"Приближённое значение корня: {root}")
print(f"Значение функции в найденной точке: {f(root)}")
